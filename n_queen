def print_board(board):
    for i in range(len(board)):
        for j in range(len(board[i])):
            if board[i][j] == 1:
                print("Q", end=" ")
            else:
                print(".", end=" ")
        print()
 
def is_safe(board, row, col, N):
    for i in range(row):
        if board[i][col] == 1:
            return False
 
    for i in range(row):
        for j in range(N):
            if board[i][j] == 1 and abs(i - row) == abs(j - col):
                return False
 
    return True
 
def solve_nqueens(board, row, N):
    if row == N:
        return True
    for col in range(N):
        if is_safe(board, row, col, N):
            board[row][col] = 1
            if solve_nqueens(board, row + 1, N):
                return True
            board[row][col] = 0
    return False
 
def n_queens(N):
    board = []
    for i in range(N):
        row = [0] * N
        board.append(row)
    
    if solve_nqueens(board, 0, N):
        print("Solution found:")
        print_board(board)
    else:
        print("No solution exists.")
 
N = int(input("Enter the number of queens: "))
n_queens(N)



✅ Problem Statement:

Place N queens on an N×N chessboard such that no two queens threaten each other.
This means no two queens can be in the same row, column, or diagonal.

✅ Algorithm: Backtracking Approach
1.Place one queen in each row.
2.For the current row, try placing a queen in each column one by one.
3.Check if the queen can be placed safely:
   --->No other queen in the same column.
   --->No other queen on the upper left or upper right diagonals.
4.If safe, place the queen and move to the next row.
5.If all queens are placed, return success.
6.If not, backtrack and try the next column in the previous row.

✅ Time and Space Complexity

Time Complexity: O(N!) — Since we place one queen per row and try up to N columns, and backtrack.
Space Complexity: O(N²) — For the board matrix and recursion stack.

✅ Viva/Oral Questions with Answers

1. What is the N-Queens problem?
Placing N queens on an N×N board such that no two queens attack each other (i.e., no two are in the same row, column, or diagonal).

2. Which algorithm is used here?
Backtracking — we try a solution step by step and backtrack if a conflict occurs.

3. What is backtracking?
It’s a trial-and-error algorithm where we build a solution incrementally and abandon a path as soon as it is invalid.

4. How do you check if a queen is safe?
We check for no other queen in:
Same column
Upper left diagonal
Upper right diagonal

5. Why don’t we check the current row in is_safe()?
Because we're placing one queen per row — there's no possibility of two queens in the same row.

6. What are the base and recursive cases in your code?
Base case: if row == N → All queens placed.
Recursive case: Try placing a queen in each column of the current row.

7. Can this problem be solved using other methods?
Yes:
Using sets or arrays for faster constraint tracking.
Using Constraint Satisfaction Problem (CSP) techniques like forward checking.

8. What is the output format of your solution?
It prints the board using 'Q' for queen and '.' for empty cells.

9. What happens if there is no solution?
The function prints: “No solution exists.”

10. How does backtracking work here?
If placing a queen leads to a dead end (no safe position in the next row), we remove it (backtrack) and try the next column.


